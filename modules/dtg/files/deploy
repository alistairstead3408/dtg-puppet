#! /usr/bin/env python2.7

import argparse
import socket
import threading
import sys, os
import time
from fabric.api import *
from git import *

DTG_DOM = '.dtg.cl.cam.ac.uk'

DOM0    = 'root@husky0' + DTG_DOM
REMOTE_PREFIX = 'lick'

PUPPET_BARE = '/etc/puppet-bare'

SHA_LENGTH = 9

PHYSICAL_MACHINES = [ {'name': 'nas01', 'hostname': 'nas01' + DTG_DOM, 'repo_loc': PUPPET_BARE, 'VM': False},
                      {'name': 'nas04', 'hostname': 'nas04' + DTG_DOM, 'repo_loc': PUPPET_BARE, 'VM': False},
                      {'name': 'code', 'hostname': 'code' + DTG_DOM, 'repo_loc': PUPPET_BARE, 'VM': False},
                      {'name': 'entropy', 'hostname': 'entropy' + DTG_DOM, 'repo_loc': PUPPET_BARE, 'VM': False},
                      {'name': 'github', 'hostname': 'git@github.com', 'repo_loc':'ucam-cl-dtg/dtg-puppet.git', 'VM': False},
                      {'name': 'origin', 'hostname': 'git@dtg-code.cl.cam.ac.uk', 'repo_loc': 'infrastructure/dtg-puppet', 'VM': False}
                  ]

@task
def get_vms():
    uuids = run('xe vm-list params=uuid power-state=running PV-bootloader=pygrub --minimal').split(',')
    vms = []
    for uuid in uuids:
        name_label = run('xe vm-list params=name-label uuid=%s --minimal' % uuid).replace(' ','')
        ip = run('xe vm-param-get param-name=networks uuid=%s | sed -e \'s_0/ip: __\' -e  \'s/; .*$//\'' % uuid)
        try:
            hostname = socket.gethostbyaddr(ip)[0]
        except socket.error:
            sys.stderr.write("Unable to lookup hostname of %s\n" % name_label)
            continue

        vms.append({'name':name_label, 'hostname':hostname, 'repo_loc': PUPPET_BARE, 'VM': True, 'uuid':uuid})
    return vms

def get_machines():
    with settings(hide('running', 'stdout')):
        vms = execute(get_vms, hosts=[DOM0])
    return PHYSICAL_MACHINES + vms[DOM0]

@task
def snapshot_mc(mc, commit_id):
    assert mc['VM']

    cur_snaps = run('xe vm-list params=snapshots uuid=%s --minimal' % mc['uuid']).split('; ')
    if any(commit_id in u for u in cur_snaps):
        print('%s already has a snapshot for commit %s. Not snapshotting again' % (mc['name'], commit_id))
    else:
        print('Snapshotting %s' % mc['name'])
        run('xe vm-snapshot uuid=%s new-name-label=%s' % (mc['uuid'], commit_id[0:SHA_LENGTH]))

@task
def upgrade_mc():
    # Remove unusued packages to reduce the chance of falling over
    # during the upgrade
    sudo('apt-get autoremove')
    sudo('do-release-upgrade -f DistUpgradeViewNonInteractive')

@task
def post_update_hook():
    run('/etc/puppet-bare/hooks/post-update')

def add_remotes(repo, machines):
    """
    Delete all remotes, then add those listed in `machines'
    """
    for remote in repo.remotes:
        if (remote.name.startswith(REMOTE_PREFIX)):
            repo.delete_remote(remote)
    for mc in machines:
        new_remote = repo.create_remote(REMOTE_PREFIX + '-' + mc['name'], mc['hostname']  + ':' + mc['repo_loc'])

def push_config(repo, mc, upgrade):
    with settings(hide('running', 'stdout')):
        if mc['VM']:
            execute(snapshot_mc, mc, repo.head.commit.hexsha, hosts=[DOM0])
    if upgrade:
        execute(upgrade_mc, hosts=[mc['hostname']])
    print('Pushing to %s' % mc['name'])
    repo.remotes[REMOTE_PREFIX + '-' + mc['name']].push()

    #  We need to manually force the update hook to execute after pushing.
    #  PyGit doesn't seem to do this.
    execute(post_update_hook, hosts=[mc['hostname']])


def main(args):
    ssh_no_fngr =  "%s/%s" % (os.getcwd(), 'ssh-no-fingerprint')
    try:
        with open(ssh_no_fngr): pass
    except IOError:
        sys.stderr.write('You must lick from modules/dtg/files')
        sys.exit(1)

    repo = Repo('.')
    machines = get_machines()
    if args.machines:
        machines = filter(lambda m : m['name'] in args.machines, machines)
    if not machines:
        sys.stderr.write("No machines to apply puppet to")
        sys.exit(-1);

    add_remotes(repo, machines)

    # Set GIT_SSH to point to the wrapper around SSH that stops hostkey checks.
    # We don't need to check hostkeys as we're only pushing at hosts, so we don't care if someone MiTMs us.
    os.environ['GIT_SSH'] = ssh_no_fngr

    threads = []
    for mc in machines:
        thread = threading.Thread(name=mc['name'], target=push_config, args=(repo, mc, args.upgrade))
        threads.append(thread)
        thread.start()
        time.sleep(1)


    for thread in threads:
        thread.join()

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Pushes the master branch of dtg-puppet, as found on github all over the world')
    parser.add_argument('--boot', help='Boot linux machines that are currently turned off.')
    parser.add_argument('--do-release-upgrade', action='store_true', dest='upgrade', help='Upgrade the version of Ubuntu before applying the puppet config')
    parser.add_argument('machines', nargs='?', help='Limit the machines that the lick is applied to')

    args = parser.parse_args()
    main(args)
